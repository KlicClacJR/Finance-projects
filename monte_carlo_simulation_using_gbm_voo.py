# -*- coding: utf-8 -*-
"""Monte Carlo Simulation using GBM-VOO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-M7WuX6n0ozO8sqHojz_OQy1_bK2JyY
"""

# Monte Carlo simulation of VOO stock price over 5 years using Geometric Brownian Motion
# Estimates probabilities of hitting specific return targets, beating inflation, and government debt returns.

import numpy as np # Used for numerical operations and array handling
import matplotlib.pyplot as plt # Used for plotting the simulation results

# Define initial parameters for the simulation
S0 = 585.58  # Initial stock price (VOO stock as of Jul 26 2025 end of trading day)
mu = .09     # Expected annual return (drift)
sigma = .1822 # Annual volatility
Time = 5     # Total time horizon in years
dt = 1/252   # Time step (assuming 252 trading days in a year)
N = int(Time/dt) # Number of time steps
simulations = 10000 # Number of simulation paths

# Create an array to store the simulation results and set initial price
arr = np.zeros((N, simulations))
arr[0] = S0

# Run the Monte Carlo simulation using Geometric Brownian Motion
for  t in range(1, N):
  Z = np.random.standard_normal(simulations) # Generate random numbers
  # Calculate the price at the next time step
  arr[t] = arr[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)

# Plot the simulated stock price paths
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(arr[:, :100]) #printing first 100 simulations for reading clarity
ax.set_title("VOO simulation")
ax.set_xlabel('Trading Days')
ax.set_ylabel('Price per Share ($)')
ax.grid(True)
plt.show()

# Calculate the final price and percentage change for each simulation
final_price = arr[-1, :]
percentage_change = ((final_price - S0) / S0) * 100

# Define target percentage increases and their annual equivalents
target_increase_5_years = 61 # 61% increase over 5 years (approx 10% annual growth)
target_annual_growth_rate = (1 + target_increase_5_years / 100)**(1/Time) - 1
no_profit = 0 # Breaking even
investing_in_govt_debt = 27.6 # 27.6% increase over 5 years (e.g., based on FDLXX historical returns)
inflation = 15.93 # 15.93% increase over 5 years (approx 3% annual inflation)

# Calculate the number of simulations that meet or exceed each target
number_making_profit = np.sum(percentage_change>=no_profit)
number_reaching_target = np.sum(percentage_change >= target_increase_5_years)
number_beating_FDLXX = np.sum(percentage_change>=investing_in_govt_debt)
number_beating_inflation = np.sum(percentage_change>=inflation)

# Calculate and print the probability of meeting or exceeding each target
probability_making_profit = number_making_profit / simulations
probability_meeting_target = number_reaching_target / simulations
probability_beating_FDLXX = number_beating_FDLXX / simulations
probability_beating_inflation = number_beating_inflation / simulations

print (f'Target (approx {target_annual_growth_rate:.2%} annual growth): {probability_meeting_target}')
print (f'Breaking even: {probability_making_profit}')
print (f'Beating government debt (e.g., FDLXX): {probability_beating_FDLXX}')
print (f"Beating inflation: {probability_beating_inflation}")

